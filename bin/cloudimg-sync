#!/usr/bin/python
# -*- coding: utf-8 -*-

## Copyright (C) 2011 Ben Howard <ben.howard@canonical.com>
## Date: 25 February 2012
##
## This comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
## This is free software, and you are welcome to redistribute it
## under certain conditions; see copying for details.

from syncimgs.build_json import CloudJSON
from syncimgs.cloudimg import CloudImgWorker
from datetime import datetime, time, date
import syncimgs.build_json as build_json
import syncimgs.yaml_config as yaml_config

import argparse
import logging
import sys

logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s')
logger = logging.getLogger('_sync-image_')
logger.setLevel(logging.DEBUG)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='Ubuntu Cloud Image Sync Tool',
                        description="""
Rule based program for syncronizing and customizing Ubuntu Cloud Images
""",
                        epilog="""
Example usage:
    cloudimg-sync --config <configuration>
        Use <configuration> as the rule file

    cloudimg-sync --how
        Show how to write rule file

    cloudimg-sync --test-config
        Show an example configuration file
""",
                        formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('--config', action='store',
                        help='Configuration file')
    parser.add_argument('--force', action='store_true', default=False,
                        help='Force option')
    parser.add_argument('--how', action='store_true', default=False,
                        help='Display information on configuration file')
    parser.add_argument('--test-config', action='store_true',
                        default=False,
                        help='Display a test configuration')
    parser.add_argument('--manifest-only', action='store_true',
                        default=False,
                        help='Only process the manifests; useful for testing')
    parser.add_argument('--arch', action='store', default=None,
                        help='Override configuration and use arch')
    parser.add_argument('--no-overrides', action='store_true',
                        default=False,
                        help='Do not process overrides in configuration file')
    parser.add_argument('--no-cache', action='store_true',
                        default=False,
                        help='Ignore caches/refresh cache')
    parser.add_argument('--fake', action='store_true', default=False,
                        help='Download/process JSON and dry-run the work flow...pretty much useless')
    parser.add_argument('--log', action='store', default=None,
                        help='Alternative place to store log file')

    opts = parser.parse_args()

    if opts.how:
        logger.info('Displaying configuration help information')
        yaml_config.config_help()
        sys.exit(0)

    elif opts.test_config:
        logger.info('Displaying a test configuration')
        print yaml_config.get_default_config()
        sys.exit(0)

    if not opts.config:
        logger.info('Must define --config, --how or --test_config')
        sys.exit(1)

    logger.info('Setting up')

    configuration = yaml_config.read_yaml_file(opts.config)

    if configuration.process_logs or opts.log:

        log_file = None

        if opts.log:
            log_file = opts.log
        elif configuration.process_logs:

            time_stamp = str(datetime.today()).replace(' ', '_')
            time_stamp = time_stamp.replace(':', '')
            log_file = '%s/process-%s.log' \
                % (configuration.process_logs, time_stamp)

        logformat = \
            logging.Formatter('%(asctime)s %(levelname)s: %(message)s')
        logfile = logging.FileHandler(log_file)
        logfile.setFormatter(logformat)
        logger.addHandler(logfile)
        logger.setLevel(logging.DEBUG)
        logger.info('Log file: %s' % log_file)

    if opts.manifest_only:
        logger.info('Overriding defaults and mirroring manifest files only'
                    )
        configuration.mirror = ['manifest']
        configuration.publish = []
        configuration.enable_overrides = False

    if opts.arch:
        logger.info('Override configuration; setting architecture to %s'
                     % opts.arch)
        configuration.arches = [opts.arch]

    cloudjson = CloudJSON(gpg_verify=configuration.gpg_validate,
                          url=configuration.host_url)
    catalog = cloudjson.build_catalog

    logger.info('Vendor is:       %s' % catalog.vendor_company)
    logger.info('Manifest date:   %s' % catalog.manifest_date)
    logger.info('Manifest serial: %s' % catalog.manifest_serial)
    logger.info('Transfer hosts:  %s'
                % ' '.join(catalog.mirrors_transfer))

    if not cloudjson.is_new(configuration.history_log) \
        and not opts.force:
        logger.warn('New JSON is not available, aborting')
        sys.exit(1)

    CloudImgWorker(configuration, catalog, run=True,
                   no_cache=opts.no_cache, dry_run=opts.fake)
    cloudjson.write_epoch(configuration.history_log)

# vi: ts=4 expandtab
